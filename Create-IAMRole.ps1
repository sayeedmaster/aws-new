
param(
    [Parameter(Mandatory = $false)]
    [string]$ProfileName,
    [Parameter(Mandatory = $false)]
    [string]$RoleName = "EC2-UserDataExecutionRole",
    [Parameter(Mandatory = $false)]
    [string]$PSModulesPath = "C:\github\psmodules"
)

$PolicyName      = "$RoleName-Policy"
$TrustPolicyFile = "$env:TEMP\ec2-trust-policy.json"
$PolicyFile      = "$env:TEMP\ec2-userdata-permissions.json"

# Create-IAMRole.ps1
# This script creates an IAM role for EC2 instances to execute user data scripts.
# It includes permissions for SSM, Secrets Manager, and S3 access.
# Ensure the AWS.Tools modules are available in the specified path
# and that you have the necessary permissions to create IAM roles and policies.


# Import required AWS.Tools modules
try {
    Import-Module -Name (Join-Path $PSModulesPath "AWS.Tools.Common") -ErrorAction Stop
    Import-Module -Name (Join-Path $PSModulesPath "AWS.Tools.IdentityManagement") -ErrorAction Stop
    Import-Module -Name (Join-Path $PSModulesPath "AWS.Tools.SecurityToken") -ErrorAction Stop
    Write-Host "Successfully imported AWS.Tools modules (Common, IdentityManagement, SecurityToken)" -ForegroundColor Green
}
catch {
    Write-Host "Failed to import modules from $PSModulesPath. Error: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Validate ProfileName
if (-not $ProfileName) {
    Write-Host "No -ProfileName provided. Please specify an SSO profile generated by Generate-SSOProfiles.ps1 (e.g., -ProfileName 'sso-Prod-Admin')." -ForegroundColor Yellow
    exit 1
}


# Derive region from profile config, environment variable, or fallback
function Get-ValidAWSRegion {
    param(
        [string]$ProfileName
    )
    $validRegions = @(
        "us-east-1", "us-east-2", "us-west-1", "us-west-2",
        "ap-south-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3",
        "ap-southeast-1", "ap-southeast-2", "ca-central-1",
        "eu-central-1", "eu-west-1", "eu-west-2", "eu-west-3",
        "eu-north-1", "sa-east-1"
    )
    # Try profile config
    try {
        $configPath = Join-Path $env:USERPROFILE ".aws\config"
        if (Test-Path $configPath) {
            $lines = Get-Content $configPath
            $inSection = $false
            foreach ($line in $lines) {
                if ($line -match "^\[profile $ProfileName\]" -or $line -match "^\[$ProfileName\]") {
                    $inSection = $true
                    continue
                }
                if ($inSection) {
                    if ($line -match "^\[") { $inSection = $false; continue }
                    if ($line -match "^region\s*=\s*(.+)") {
                        $region = $Matches[1].Trim()
                        if ($validRegions -contains $region) { return $region }
                    }
                }
            }
        }
    } catch {}
    # Try env var
    if ($env:AWS_DEFAULT_REGION -and $validRegions -contains $env:AWS_DEFAULT_REGION) {
        return $env:AWS_DEFAULT_REGION
    }
    # Fallback
    return "eu-west-1"
}

$Region = Get-ValidAWSRegion -ProfileName $ProfileName
Write-Host "Using AWS profile: $ProfileName" -ForegroundColor Cyan
Write-Host "Using AWS region: $Region" -ForegroundColor Cyan

    
# Step 1: Create the EC2 Trust Policy
@'
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
'@ | Set-Content -Path $TrustPolicyFile -Encoding ascii

# Step 2: Create Permissions Policy (SSM, Secrets Manager, S3)
@'
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameter",
        "ssm:GetParameters",
        "ssm:GetParametersByPath",
        "secretsmanager:GetSecretValue",
        "s3:GetObject",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups"
      ],
      "Resource": "*"
    }
  ]
}
'@ | Set-Content -Path $PolicyFile -Encoding ascii


# Step 3: Create IAM Role
$trustDoc = Get-Content -Path $TrustPolicyFile -Raw
$iamRole = New-IAMRole -RoleName $RoleName -AssumeRolePolicyDocument $trustDoc -ProfileName $ProfileName -Region $Region
if ($iamRole) {
    Write-Host "‚úÖ Created IAM role: $RoleName" -ForegroundColor Green
} else {
    Write-Host "‚ùå Failed to create IAM role: $RoleName" -ForegroundColor Red
    exit 1
}

# Step 4: Create and Attach IAM Policy
$policyDoc = Get-Content -Path $PolicyFile -Raw
$iamPolicy = New-IAMPolicy -PolicyName $PolicyName -PolicyDocument $policyDoc -ProfileName $ProfileName -Region $Region
if ($iamPolicy) {
    Write-Host "‚úÖ Created IAM policy: $PolicyName" -ForegroundColor Green
} else {
    Write-Host "‚ùå Failed to create IAM policy: $PolicyName" -ForegroundColor Red
    exit 1
}

# Step 5: Attach the policy to the role
Register-IAMRolePolicy -RoleName $RoleName -PolicyArn $iamPolicy.Arn -ProfileName $ProfileName -Region $Region
Write-Host "‚úÖ Attached policy to role." -ForegroundColor Green

# Cleanup
Remove-Item $TrustPolicyFile, $PolicyFile

Write-Host "`nüéâ Done! Role '$RoleName' is ready to be attached to EC2 instances."
Write-Host "üîó Policy ARN: $($iamPolicy.Arn)" -ForegroundColor Gray
Write-Host "You can now use this role in your EC2 instance launch configurations or templates." -ForegroundColor Cyan

